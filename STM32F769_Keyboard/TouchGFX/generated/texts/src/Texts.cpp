/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <touchgfx/TextProvider.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/TypedText.hpp>
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
    va_end(pArg);
    return width;
}

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
    va_end(pArg);
    return width;
}

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
    {
        substituteGlyphs();
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
}

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
    va_list pArg;
    va_start(pArg, format);
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
    va_end(pArg);
}

//Default typed text database
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE = {
    0x2, 0x0, // @0 "<>"
    0x70b9, 0x51fb, 0x7f16, 0x8f91, 0x5185, 0x5bb9, 0x0, // @2 "??????"
    0x44, 0x65, 0x6c, 0x65, 0x74, 0x0, // @9 "Delet"
    0x45, 0x6e, 0x74, 0x65, 0x72, 0x0, // @15 "Enter"
    0x975e, 0x7f16, 0x8f91, 0x533a, 0x57df, 0x0, // @21 "?????"
    0x45, 0x6e, 0x2f, 0x4e2d, 0x0, // @27 "En/?"
    0x70, 0x71, 0x72, 0x73, 0x0, // @32 "pqrs"
    0x77, 0x78, 0x79, 0x7a, 0x0, // @37 "wxyz"
    0x4e2d, 0x2f, 0x45, 0x6e, 0x0, // @42 "?/En"
    0x5220, 0x20, 0x20, 0x9664, 0x0, // @47 "?  ?"
    0x540e, 0x20, 0x20, 0x9000, 0x0, // @52 "?  ?"
    0x786e, 0x20, 0x20, 0x5b9a, 0x0, // @57 "?  ?"
    0x31, 0x32, 0x33, 0x0, // @62 "123"
    0x41, 0x2f, 0x61, 0x0, // @66 "A/a"
    0x43, 0x4c, 0x52, 0x0, // @70 "CLR"
    0x44, 0x65, 0x6c, 0x0, // @74 "Del"
    0x45, 0x53, 0x43, 0x0, // @78 "ESC"
    0x45, 0x6e, 0x74, 0x0, // @82 "Ent"
    0x61, 0x2f, 0x41, 0x0, // @86 "a/A"
    0x61, 0x62, 0x63, 0x0, // @90 "abc"
    0x64, 0x65, 0x66, 0x0, // @94 "def"
    0x67, 0x68, 0x69, 0x0, // @98 "ghi"
    0x6a, 0x6b, 0x6c, 0x0, // @102 "jkl"
    0x6d, 0x6e, 0x6f, 0x0, // @106 "mno"
    0x74, 0x75, 0x76, 0x0, // @110 "tuv"
    0x5206, 0x8bcd, 0x0, // @114 "??"
    0x23, 0x0, // @117 "#"
    0x25, 0x0, // @119 "%"
    0x26, 0x0, // @121 "&"
    0x28, 0x0, // @123 "("
    0x29, 0x0, // @125 ")"
    0x2a, 0x0, // @127 "*"
    0x2b, 0x0, // @129 "+"
    0x2d, 0x0, // @131 "-"
    0x2e, 0x0, // @133 "."
    0x2f, 0x0, // @135 "/"
    0x30, 0x0, // @137 "0"
    0x31, 0x0, // @139 "1"
    0x32, 0x0, // @141 "2"
    0x34, 0x0, // @143 "4"
    0x35, 0x0, // @145 "5"
    0x36, 0x0, // @147 "6"
    0x37, 0x0, // @149 "7"
    0x38, 0x0, // @151 "8"
    0x39, 0x0, // @153 "9"
    0x3d, 0x0, // @155 "="
    0x40, 0x0, // @157 "@"
    0x42, 0x0, // @159 "B"
    0x44, 0x0, // @161 "D"
    0x45, 0x0, // @163 "E"
    0x46, 0x0, // @165 "F"
    0x47, 0x0, // @167 "G"
    0x48, 0x0, // @169 "H"
    0x49, 0x0, // @171 "I"
    0x4a, 0x0, // @173 "J"
    0x4b, 0x0, // @175 "K"
    0x4c, 0x0, // @177 "L"
    0x4d, 0x0, // @179 "M"
    0x4e, 0x0, // @181 "N"
    0x4f, 0x0, // @183 "O"
    0x50, 0x0, // @185 "P"
    0x51, 0x0, // @187 "Q"
    0x53, 0x0, // @189 "S"
    0x54, 0x0, // @191 "T"
    0x55, 0x0, // @193 "U"
    0x56, 0x0, // @195 "V"
    0x57, 0x0, // @197 "W"
    0x58, 0x0, // @199 "X"
    0x59, 0x0, // @201 "Y"
    0x5a, 0x0, // @203 "Z"
    0x62, 0x0, // @205 "b"
    0x64, 0x0, // @207 "d"
    0x65, 0x0, // @209 "e"
    0x67, 0x0, // @211 "g"
    0x68, 0x0, // @213 "h"
    0x6a, 0x0, // @215 "j"
    0x6b, 0x0, // @217 "k"
    0x6d, 0x0, // @219 "m"
    0x70, 0x0, // @221 "p"
    0x71, 0x0, // @223 "q"
    0x75, 0x0, // @225 "u"
    0x77, 0x0, // @227 "w"
    0x78, 0x0, // @229 "x"
    0x79, 0x0, // @231 "y"
    0x4f60, 0x0, // @233 "?"
    0x597d, 0x0, // @235 "?"
    0x6211, 0x0, // @237 "?"
    0x662f, 0x0, // @239 "?"
    0x754c, 0x0 // @241 "?"
};
TEXT_LOCATION_FLASH_PRAGMA
KEEP extern uint32_t const indicesGb[] TEXT_LOCATION_FLASH_ATTRIBUTE;

//array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[1] = { 0 };

//Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] = {
    indicesGb
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
    {
        if (languagesArray[id] != 0)
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}
